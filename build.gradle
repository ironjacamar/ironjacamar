/*
 * IronJacamar, a Java EE Connector Architecture implementation
 * Copyright 2015, Red Hat Inc, and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the Eclipse Public License 1.0 as
 * published by the Free Software Foundation.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the Eclipse
 * Public License for more details.
 *
 * You should have received a copy of the Eclipse Public License 
 * along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
import org.apache.tools.ant.filters.*;

defaultTasks 'build'


version = "2.0.0-SNAPSHOT"
// Dependencies

ext {
  libraries = [
    apache_el: "org.mortbay.jasper:apache-el:8.0.27",
    ant: "org.apache.ant:ant:1.9.7",
    apiviz: "org.jboss.apiviz:apiviz:1.3.2.GA",
    byteman: "org.jboss.byteman:byteman:3.0.5",
    byteman_submit: "org.jboss.byteman:byteman-submit:3.0.5",
    fasterxml: "com.fasterxml:classmate:1.3.1",
    fungal: "com.github.fungal:fungal:0.11.0.Final",
    fungal_cli: "com.github.fungal:fungal-cli:0.11.0.Final",
    hibernate_validator: "org.hibernate:hibernate-validator:5.2.4.Final",
    jandex: "org.jboss:jandex:2.0.2.Final",
    javax_inject: "javax.inject:javax.inject:1",
    jboss_common: "org.jboss:jboss-common-core:2.5.0.Final",
    jboss_jaspi: "org.jboss.spec.javax.security.auth.message:jboss-jaspi-api_1.1_spec:1.0.0.Final",
    jboss_logging: "org.jboss.logging:jboss-logging:3.3.0.Final",
    jboss_logging_manager: "org.jboss.logmanager:jboss-logmanager:2.0.3.Final",
    jboss_logging_manager_log4j: "org.jboss.logmanager:log4j-jboss-logmanager:1.1.2.Final",
    jboss_logging_processor: "org.jboss.logging:jboss-logging-processor:2.0.1.Final",
    jboss_naming: "org.jboss.naming:jnpserver:5.0.3.GA",
    jboss_stdio: "org.jboss.stdio:jboss-stdio:1.0.2.GA",
    jboss_threads: "org.jboss.threads:jboss-threads:2.2.1.Final",
    jetty_annotation: "javax.annotation:javax.annotation-api:1.2",
    jetty_asm: "org.ow2.asm:asm:5.0.1",
    jetty_asm_commons: "org.ow2.asm:asm-commons:5.0.1",
    jetty_ecj: "org.eclipse.jdt.core.compiler:ecj:4.4.2",
    jetty_dom4j: "dom4j:dom4j:1.6.1",
    jetty_jasper: "org.mortbay.jasper:jasper-jsp:8.0.27",
    jetty_server_annotations: "org.eclipse.jetty:jetty-annotations:9.3.8.v20160314",
    jetty_server_continuation: "org.eclipse.jetty:jetty-continuation:9.3.8.v20160314",
    jetty_server_http: "org.eclipse.jetty:jetty-http:9.3.8.v20160314",
    jetty_server_io: "org.eclipse.jetty:jetty-io:9.3.8.v20160314",
    jetty_server_jmx: "org.eclipse.jetty:jetty-jmx:9.3.8.v20160314",
    jetty_server_jsp: "org.eclipse.jetty:apache-jsp:9.3.8.v20160314",
    jetty_server_plus: "org.eclipse.jetty:jetty-plus:9.3.8.v20160314",
    jetty_server_schemas: "org.eclipse.jetty.toolchain:jetty-schemas:3.1",
    jetty_server_security: "org.eclipse.jetty:jetty-security:9.3.8.v20160314",
    jetty_server_server: "org.eclipse.jetty:jetty-server:9.3.8.v20160314",
    jetty_server_servlet: "org.eclipse.jetty:jetty-servlet:9.3.8.v20160314",
    jetty_server_util: "org.eclipse.jetty:jetty-util:9.3.8.v20160314",
    jetty_server_webapp: "org.eclipse.jetty:jetty-webapp:9.3.8.v20160314",
    jetty_server_xml: "org.eclipse.jetty:jetty-xml:9.3.8.v20160314",
    jetty_servlet: "javax.servlet:javax.servlet-api:3.1.0",
    jetty_servlet_jsp: "org.mortbay.jasper:apache-jsp:8.0.27",
    jgroups: "org.jgroups:jgroups:3.6.9.Final",
    junit: "junit:junit:4.12",
    log4j: "log4j:log4j:1.2.16",
    maven: "org.apache.maven:maven-plugin-api:3.3.9",
    narayana_jta: "org.jboss.narayana.jta:narayana-jta:5.3.1.Final",
    narayana_integration: "org.jboss.narayana.jts:narayana-jts-integration:5.3.1.Final",
    narayana_spi: "org.jboss:jboss-transaction-spi:7.3.1.Final",
    picketbox: "org.picketbox:picketbox:4.9.3.Final",
    saxon: "net.sf.saxon:saxon:8.7",
    saxon_dom: "net.sf.saxon:saxon-dom:8.7",
    shrinkwrap_api: "org.jboss.shrinkwrap:shrinkwrap-api:1.2.2",
    shrinkwrap_impl: "org.jboss.shrinkwrap:shrinkwrap-impl-base:1.2.2",
    shrinkwrap_spi: "org.jboss.shrinkwrap:shrinkwrap-spi:1.2.2",
    shrinkwrap_descriptors_api: "org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-api-base:2.0.0-alpha-5",
    shrinkwrap_descriptors_impl: "org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-impl-base:2.0.0-alpha-5",
    shrinkwrap_descriptors_spi: "org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-spi:2.0.0-alpha-5",
    shrinkwrap_descriptors_ant: "org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-ant:2.0.0-alpha-5",
    shrinkwrap_descriptors_metadata_parser: "org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-metadata-parser:2.0.0-alpha-5",
    transaction_spec: "org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.0.Final",
    validation_spec: "javax.validation:validation-api:1.1.0.Final",
    asciidoctor:  "org.asciidoctor:asciidoctor-gradle-plugin:1.5.2",
    asciidoctorjpdf: "org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11",
    asciidoctorjepub3: "org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.6"
  ]
}

// Java version
ext.javaLanguageLevel = "1.8"

buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
    jcenter()

    maven {
      name 'jboss-nexus'
      url "http://repository.jboss.org/nexus/content/groups/public/"
    }
    maven {
      name "jboss-snapshots"
      url "http://snapshots.jboss.org/maven2/"
    }
  }
  dependencies {
    classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1' 
  }
}

allprojects {
  apply plugin: 'distribution'
  apply plugin: 'jacoco'
  apply plugin: 'maven-publish'
  apply plugin: 'maven-publish-auth'


  repositories {
    mavenCentral()
    mavenLocal()
    mavenCentral name: "jboss-nexus", artifactUrls: ["http://repository.jboss.org/nexus/content/groups/public/"]
    mavenCentral name: "jboss-snapshots", artifactUrls: ["http://snapshots.jboss.org/maven2/"]
    mavenCentral name: "fungal", artifactUrls: ["http://jesperpedersen.github.io/fungal/maven2/"]

  }

  jacoco {
    toolVersion = '0.7.6.201602180812'
  }
}

buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
    mavenCentral name: "jboss-nexus", artifactUrls: ["http://repository.jboss.org/nexus/content/groups/public/"]
    mavenCentral name: "jboss-snapshots", artifactUrls: ["http://snapshots.jboss.org/maven2/"]

  }
}


subprojects { subProject ->
  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'eclipse'
  apply plugin: 'maven-publish'
  repositories {
    mavenCentral()
    mavenLocal()
    mavenCentral name: "jboss-nexus", artifactUrls: ["http://repository.jboss.org/nexus/content/groups/public/"]
    mavenCentral name: "jboss-snapshots", artifactUrls: ["http://snapshots.jboss.org/maven2/"]

  }

  configurations {
    apiVizTool {
      description = "APIViz"
    }
    byteman {
      description = "Byteman"
    }
    jbossLoggingTool {
      description = "JBoss Logging Tool Processor"
    }
  }

  dependencies {
    compile(libraries.jboss_logging_processor)

    apiVizTool(libraries.apiviz)
    byteman(libraries.byteman)
    jbossLoggingTool(libraries.jboss_logging_processor)
  }

  // Add tools.jar
  ext.toolsJar = file("${System.getProperty('java.home')}/../lib/tools.jar")
  if ( ext.toolsJar.exists() ) {
     dependencies {
       testCompile files( toolsJar )
     }
  }

  targetCompatibility = rootProject.javaLanguageLevel
  sourceCompatibility = rootProject.javaLanguageLevel

  eclipse {
    jdt {
      sourceCompatibility = rootProject.javaLanguageLevel
      targetCompatibility = rootProject.javaLanguageLevel
    }
    classpath {
      downloadSources = true
      downloadJavadoc = true
    }
  }

  tasks.withType(JavaCompile) {
    options.fork = true
    options.encoding = "UTF-8"
  }

  task processInputFiles(type: Copy) {
    from 'src/main/java'
    into 'src/main/java'
    include '**/*.java.in'
    rename {
      String fileName -> fileName.replace('.in', '')
    }
    filter {
      String line -> line.replaceAll("@VERSION@", rootProject.version)
    }
  }

  afterEvaluate {
    configure(tasks.processResources) {
      filter(ReplaceTokens,
              tokens: [IJ_VERSION: rootProject.version])
    }
  }


  task compile
  compile.dependsOn compileJava, processResources, compileTestJava, processTestResources

  sourceSets.all {
    ext.originalJavaSrcDirs = java.srcDirs
    ext.generatedLoggingSrcDir = file("${buildDir}/generated/logging/${name}")
    java.srcDir generatedLoggingSrcDir
  }

  task generateLoggingClasses(type: JavaCompile) {
    ext.aptDumpDir = subProject.file( "${buildDir}/tmp/apt/logging" )
    classpath = compileJava.classpath + configurations.jbossLoggingTool
    source = sourceSets.main.originalJavaSrcDirs
    destinationDir = aptDumpDir
    options.define(
      compilerArgs: [
                      "-nowarn",
                      "-proc:only",
                      "-encoding", "UTF-8",
                      "-processor", "org.jboss.logging.processor.apt.LoggingToolsProcessor",
                      "-s", "$sourceSets.main.generatedLoggingSrcDir.absolutePath",
                      "-Adebug=true",
                      "-AskipTranslations=true",
                      "-source", rootProject.javaLanguageLevel,
                      "-target", rootProject.javaLanguageLevel,
                      "-AtranslationFilesPath=${project.rootDir}/src/main/resources"

     ]
    );
    outputs.dir sourceSets.main.generatedLoggingSrcDir;
    doFirst {
      sourceSets.main.generatedLoggingSrcDir.mkdirs()
    }
    doLast {
      aptDumpDir.delete()
    }


  }

  // for the time being eat the annoying output from running the annotation processors
  generateLoggingClasses.logging.captureStandardError(LogLevel.INFO)

  task generateSources( type: Task )
  generateSources.dependsOn generateLoggingClasses

  generateLoggingClasses.mustRunAfter processInputFiles

  compileJava.dependsOn processInputFiles, generateLoggingClasses
  compileJava.options.define(compilerArgs: ["-proc:none", "-encoding", "UTF-8", "-Xlint:deprecation"])
  compileTestJava.options.define(compilerArgs: ["-proc:none", "-encoding", "UTF-8", "-Xlint:deprecation"])

  checkstyle {
    sourceSets = [ subProject.sourceSets.main, subProject.sourceSets.test ]
    configProperties = [samedir: rootProject.file('tools/checkstyle').absolutePath]
    configFile = rootProject.file('tools/checkstyle/checkstyle.xml')
    showViolations = true
    ignoreFailures = false
    toolVersion = '6.16.1'
  }

  checkstyleMain.exclude '**/*_$bundle*'
  checkstyleMain.exclude '**/*_$logger*'

  distZip.enabled = false
  distTar.enabled = false
  
  tasks.withType(Jar){
    doFirst{
      manifest {
        attributes(
          "Manifest-Version" : "1.0",
          "Implementation-Version" : rootProject.version,
          "Implementation-Vendor" : "The IronJacamar project (http://www.ironjacamar.org)",
          "Implementation-Id" : "org.ironjacamar",
          "Created-By" : System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
          "Built-With": "gradle-${rootProject.getGradle().getGradleVersion()}"
        )
      }
    }
  }

  test {
    useJUnit()

    jvmArgs "-javaagent:" + project.configurations.byteman.asPath + "=listener:true"
  }
}

//Distribution
def distributionDependencies = copySpec {
  from project(':testsuite').configurations.testCompile
  into 'lib'
  include '**/*.jar'
  exclude '**/jboss-logging-processor*'
  exclude '**/jdeparser*'
  exclude '**/tools*'
  rename (/(.+)(-[\d]+.+)\.jar/, '$1.jar')
  rename (/(.+)(-[\d]+).jar/, '$1.jar')
  includeEmptyDirs = false
}

def distributionSJC = copySpec {
  from rootProject.file('sjc/src/dist/resources/')
  into ''
  include '**/*'
}

def distributionCodeGen = copySpec {
  from rootProject.file('codegenerator/src/dist/resources/')
  into 'doc/codegenerator'
  include '**/*'
}

def distributionRarInfo = copySpec {
  from rootProject.file('rarinfo/src/dist/resources/')
  into 'doc/rarinfo'
  include '**/*'
}


def distributionSchemas = copySpec {
  from rootProject.file('common/src/main/resources/')
  into 'doc'
  include '**/*'
}

def distributionLib = copySpec {
  from {allprojects.libsDir}
  into 'lib'
}

def distributionJetty = copySpec {
  from project(':web').configurations.compile
  into 'lib/jetty'
  include '**/*.jar'
  exclude '**/fungal*'
  exclude '**/jboss*'
  exclude '**/jdeparser*'
  includeEmptyDirs = false
}

def distributionConsole = copySpec {
  from rootProject.file('web/src/console/resources/')
  into 'system'
  include '**/*'
}

def distributionTracer = copySpec {
  from rootProject.file('tracer/src/dist/resources/')
  into 'doc/tracer'
  include '**/*'
}

def distributionValidator = copySpec {
  from rootProject.file('validator/src/dist/resources/')
  into 'doc/validator'
  include '**/*'
}

def distributionDoc = copySpec {
  from rootProject.file('doc/src/dist/resources/')
  into 'doc'
  include '**/*'
}

def distributionDevelDocHtml = copySpec {
  from rootProject.file('doc/build/developer-guide/html5/')
  into 'system/root.war/developer-guide/'
  include '**/*'
}
def distributionUserDocHtml = copySpec {
  from rootProject.file('doc/build/user-guide/html5/')
  into 'system/root.war/user-guide/'
  include '**/*'
}
def distributionApiJavaDoc = copySpec {
  from rootProject.file('api/build/docs/javadoc')
  into 'system/root.war/api'
  include '**/*'
}


def distributionDocOther = copySpec {
  from rootProject.file('doc/build/')
  into 'doc'
  exclude '**/html5/**'
}





distributions {
  main {
    contents {
      with distributionSJC, distributionSchemas, distributionLib, distributionDependencies,
              distributionJetty, distributionConsole, distributionCodeGen, distributionRarInfo, distributionTracer,
              distributionValidator, distributionDoc, distributionDocOther, distributionDevelDocHtml,
              distributionUserDocHtml, distributionApiJavaDoc
    }
  }
}

distZip.dependsOn subprojects.jar
distTar.dependsOn subprojects.jar

tasks.withType(Tar) {
  compression = Compression.GZIP
  extension = "tar.gz"
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.13'
}
