/*
 * IronJacamar, a Java EE Connector Architecture implementation
 * Copyright 2015, Red Hat Inc, and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the Eclipse Public License 1.0 as
 * published by the Free Software Foundation.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the Eclipse
 * Public License for more details.
 *
 * You should have received a copy of the Eclipse Public License 
 * along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

defaultTasks 'build'

version = "2.0.0.SNAPSHOT"
// Dependencies

ext {
  libraries = [
    apiviz: "org.jboss.apiviz:apiviz:1.3.2.GA",
    fungal: "com.github.fungal:fungal:0.11.0.Final",
    fungal_cli: "com.github.fungal:fungal-cli:0.11.0.Final",
    hibernate_validator: "org.hibernate:hibernate-validator:5.1.3.Final",
    jandex: "org.jboss:jandex:2.0.0.Beta1",
    javax_inject: "javax.inject:javax.inject:1",
    jboss_common: "org.jboss:jboss-common-core:2.5.0.Final",
    jboss_logging: "org.jboss.logging:jboss-logging:3.2.1.Final",
    jboss_logging_manager: "org.jboss.logmanager:jboss-logmanager:2.0.0.Final",
    jboss_logging_manager_log4j: "org.jboss.logmanager:log4j-jboss-logmanager:1.1.2.Final",
    jboss_logging_processor: "org.jboss.logging:jboss-logging-processor:2.0.0.Final",
    jboss_naming: "org.jboss.naming:jnpserver:5.0.3.GA",
    jboss_stdio: "org.jboss.stdio:jboss-stdio:1.0.2.GA",
    junit: "junit:junit:4.12",
    log4j: "log4j:log4j:1.2.16",
    narayana_jta: "org.jboss.narayana.jta:narayana-jta:5.1.0.Final",
    narayana_integration: "org.jboss.narayana.jts:narayana-jts-integration:5.1.0.Final",
    narayana_spi: "org.jboss:jboss-transaction-spi:7.1.1.Final",
    shrinkwrap_api: "org.jboss.shrinkwrap:shrinkwrap-api:1.2.0",
    shrinkwrap_impl: "org.jboss.shrinkwrap:shrinkwrap-impl-base:1.2.0",
    shrinkwrap_spi: "org.jboss.shrinkwrap:shrinkwrap-spi:1.2.0",
    shrinkwrap_descriptors_api: "org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-api-base:2.0.0-alpha-5",
    shrinkwrap_descriptors_impl: "org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-impl-base:2.0.0-alpha-5",
    shrinkwrap_descriptors_spi: "org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-spi:2.0.0-alpha-5",
    transaction_spec: "org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.0.Final",
    validation_spec: "javax.validation:validation-api:1.1.0.Final"
  ]
}

// Java version
ext.javaLanguageLevel = "1.7"

allprojects {
  apply plugin: 'distribution'
  apply plugin: 'jacoco'

  repositories {
    mavenCentral()
    mavenLocal()
    mavenCentral name: "jboss-nexus", artifactUrls: ["http://repository.jboss.org/nexus/content/groups/public/"]
    mavenCentral name: "jboss-snapshots", artifactUrls: ["http://snapshots.jboss.org/maven2/"]
    mavenCentral name: "fungal", artifactUrls: ["http://jesperpedersen.github.io/fungal/maven2/"]
  }

  jacoco {
    toolVersion = '0.7.2.201409121644'
  }
}


buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
    mavenCentral name: "jboss-nexus", artifactUrls: ["http://repository.jboss.org/nexus/content/groups/public/"]
  }
}


subprojects { subProject ->
  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'eclipse'

  configurations {
    apiVizTool {
      description = "APIViz"
    }
    jbossLoggingTool {
      description = "JBoss Logging Tool Processor"
    }
  }

  dependencies {
    compile(libraries.fungal)
    compile(libraries.fungal_cli)
    compile(libraries.hibernate_validator)
    compile(libraries.jandex)
    compile(libraries.javax_inject)
    compile(libraries.jboss_common)
    compile(libraries.jboss_logging)
    compile(libraries.jboss_logging_manager)
    compile(libraries.jboss_logging_manager_log4j)
    compile(libraries.jboss_logging_processor)
    compile(libraries.jboss_naming)
    compile(libraries.jboss_stdio)
    compile(libraries.junit)
    compile(libraries.log4j)
    compile(libraries.narayana_jta)
    compile(libraries.narayana_integration)
    compile(libraries.narayana_spi)
    compile(libraries.shrinkwrap_api)
    compile(libraries.shrinkwrap_impl)
    compile(libraries.shrinkwrap_spi)
    compile(libraries.shrinkwrap_descriptors_api)
    compile(libraries.shrinkwrap_descriptors_impl)
    compile(libraries.shrinkwrap_descriptors_spi)
    compile(libraries.transaction_spec)
    compile(libraries.validation_spec)

    testCompile(libraries.junit)

    apiVizTool(libraries.apiviz)
    jbossLoggingTool(libraries.jboss_logging_processor)
  }

  // Add tools.jar
  ext.toolsJar = file("${System.getProperty('java.home')}/../lib/tools.jar")
  if ( ext.toolsJar.exists() ) {
     dependencies {
       testCompile files( toolsJar )
     }
  }

  targetCompatibility = rootProject.javaLanguageLevel
  sourceCompatibility = rootProject.javaLanguageLevel

  eclipse {
    jdt {
      sourceCompatibility = rootProject.javaLanguageLevel
      targetCompatibility = rootProject.javaLanguageLevel
    }
    classpath {
      downloadSources = true
      downloadJavadoc = true
    }
  }

  tasks.withType(JavaCompile) {
    options.fork = true
    options.encoding = "UTF-8"
  }

  task compile
  compile.dependsOn compileJava, processResources, compileTestJava, processTestResources

  sourceSets.all {
    ext.originalJavaSrcDirs = java.srcDirs
    ext.generatedLoggingSrcDir = file("${buildDir}/generated/logging/${name}")
    java.srcDir generatedLoggingSrcDir
  }

  task generateLoggingClasses(type: JavaCompile) {
    ext.aptDumpDir = subProject.file( "${buildDir}/tmp/apt/logging" )
    classpath = compileJava.classpath + configurations.jbossLoggingTool
    source = sourceSets.main.originalJavaSrcDirs
    destinationDir = aptDumpDir
    options.define(
      compilerArgs: [
                      "-nowarn",
                      "-proc:only",
                      "-encoding", "UTF-8",
                      "-processor", "org.jboss.logging.processor.apt.LoggingToolsProcessor",
                      "-s", "$sourceSets.main.generatedLoggingSrcDir.absolutePath",
                      "-Adebug=true",
                      "-AskipTranslations=true",
                      "-source", rootProject.javaLanguageLevel,
                      "-target", rootProject.javaLanguageLevel,
                      "-AtranslationFilesPath=${project.rootDir}/src/main/resources"

     ]
    );
    outputs.dir sourceSets.main.generatedLoggingSrcDir;
    doFirst {
      sourceSets.main.generatedLoggingSrcDir.mkdirs()
    }
    doLast {
      aptDumpDir.delete()
    }
  }

  // for the time being eat the annoying output from running the annotation processors
  generateLoggingClasses.logging.captureStandardError(LogLevel.INFO)

  task generateSources( type: Task )
  generateSources.dependsOn generateLoggingClasses

  compileJava.dependsOn generateLoggingClasses
  compileJava.options.define(compilerArgs: ["-proc:none", "-encoding", "UTF-8", "-Xlint:deprecation"])
  compileTestJava.options.define(compilerArgs: ["-proc:none", "-encoding", "UTF-8", "-Xlint:deprecation"])

  checkstyle {
    sourceSets = [ subProject.sourceSets.main, subProject.sourceSets.test ]
    configFile = rootProject.file('tools/checkstyle/checkstyle.xml')
    showViolations = true
    ignoreFailures = false
  }
  checkstyleMain.exclude '**/*_$bundle*'
  checkstyleMain.exclude '**/*_$logger*'

  distZip.enabled = false
  distTar.enabled = false
  assembleMainDist.enabled = false
  
  tasks.withType(Jar){
    doFirst{
      manifest {
        attributes(
          "Manifest-Version" : "1.0",
          "Implementation-Version" : rootProject.version,
          "Implementation-Vendor" : "The IronJacamar project (http://www.ironjacamar.org)",
          "Implementation-Id" : "org.ironjacamar",
          "Created-By" : System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')',
          "Built-With": "gradle-${rootProject.getGradle().getGradleVersion()}"
        )
      }
    }
  }
}

//copy dependencies .jar to be collected by the distribution task
task copyDependencies(type: Copy) {
  from project(':api').configurations.compile
  into rootProject.libsDir
  include '**/*'
  exclude '**/jboss-logging-processor*'
  rename (/(.+)(-[\d]+.+)\.jar/, '$1.jar')
  rename (/(.+)(-[\d]+).jar/, '$1.jar')
}

distributions {
  main {
    contents {
      from {allprojects.libsDir}
      into 'lib'
    }
  }
}

distZip.dependsOn subprojects.jar, copyDependencies
distTar.dependsOn subprojects.jar, copyDependencies

tasks.withType(Tar) {
  compression = Compression.GZIP
  extension = "tar.gz"
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.3'
}
