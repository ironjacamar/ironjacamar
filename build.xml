<!--
 * IronJacamar, a Java EE Connector Architecture implementation
 * Copyright 2008, Red Hat Inc, and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->
<project name="ironjacamar" 
         default="jars" 
         basedir="." 
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <available classname="java.util.concurrent.ForkJoinPool" property="HAVE_JDK_1.7"/>
  <available classname="com.ibm.tools.attach.javaSE.Attachment" property="IBM"/>

  <!-- ================================= 
       Project              
       ================================= -->
  <property name="name" value="ironjacamar"/>
  <property name="major" value="1"/>
  <property name="minor" value="1"/>
  <property name="patch" value="0"/>
  <property name="type" value="CR1"/>

  <condition property="version" value="${major}.${minor}.${patch}-SNAPSHOT">
    <isset property="snapshot"/>
  </condition>
  <property name="version" value="${major}.${minor}.${patch}.${type}"/>

  <condition property="jdk_version" value="JDK7">
    <isset property="HAVE_JDK_1.7"/>
  </condition>
  <property name="jdk_version" value="N/A"/>

  <!-- ================================= 
       Maven repository settings
       ================================= -->
  <condition property="mavensettings" value="/private/ironjacamar/settings.xml">
    <isset property="cloudbees"/>
  </condition>
  <property name="mavensettings" value="$HOME/.m2/settings.xml"/>

  <condition property="repositoryurl" value="https://repository.jboss.org/nexus/content/repositories/snapshots/">
    <isset property="snapshot"/>
  </condition>
  <property name="repositoryurl" value="https://repository.jboss.org/nexus/service/local/staging/deploy/maven2/"/>

  <condition property="repositoryid" value="jboss-snapshots">
    <isset property="snapshot"/>
  </condition>
  <property name="repositoryid" value="jboss-releases"/>

  <!-- ================================= 
       Ivy              
       ================================= -->
  <property name="ivy.version" value="2.3.0"/>
  <property name="ivy.dir" value="${user.home}/.ivy2/cache/org.apache.ivy/jars"/>
  <property name="ivy.jar.name" value="ivy-${ivy.version}.jar"/>

  <!-- ================================= 
       Repositories              
       ================================= -->
  <property name="central.repo" value="http://repo1.maven.org/maven2"/>
  <property name="jboss.repo" value="http://repository.jboss.org/nexus/content/groups/public/"/>
  <property name="snapshots.repo" value="http://repository.jboss.org/nexus/content/repositories/snapshots/"/>
  <property name="fungal.repo" value="http://jesperpedersen.github.com/fungal/maven2"/>
  
  <!-- ================================= 
       Properties              
       ================================= -->
  <property name="lib.dir" value="${basedir}/lib" />
  <property name="build.dir" value="${basedir}/build" />
  <property name="api.dir" value="${basedir}/api" />
  <property name="doc.dir" value="${basedir}/doc" />
  <property name="target.dir" value="${basedir}/target" />
  <property name="tools.dir" value="${basedir}/tools" />
  <property name="reports.dir" value="${basedir}/reports" />
  <property name="test.dir" value="${reports.dir}" />

  <property name="javac.debug" value="on" />
  <property name="javac.deprecation" value="on" />
  <property name="javac.optimize" value="off" />

  <property name="junit.printsummary" value="yes" />
  <property name="junit.haltonerror" value="no" />
  <property name="junit.haltonfailure" value="no" />
  <property name="junit.fork" value="yes" />
  <property name="junit.timeout" value="60000" />
  <property name="junit.jvm" value="" />
  <property name="junit.jvm.options" value="-Xms128m -Xmx512m -XX:MaxPermSize=256m -Djava.net.preferIPv4Stack=true" />
  <property name="junit.batchtest.haltonerror" value="no" />
  <property name="junit.batchtest.haltonfailure" value="no" />
  <property name="junit.batchtest.fork" value="yes" />

  <!-- ================================= 
       Versions              
       ================================= -->
  <property name="version.ant" value="1.8.1"/>
  <property name="version.apache-log4j" value="1.2.16"/>
  <property name="version.apache-logging" value="1.1.0.jboss"/>
  <property name="version.apiviz" value="1.3.2.GA"/>
  <property name="version.arquillian" value="1.0.2.Final"/>
  <property name="version.arquillian.byteman" value="1.0.0.Alpha2"/>
  <property name="version.byteman" value="2.1.2"/>
  <property name="version.dom4j" value="1.6.1"/>
  <property name="version.dtd-parser" value="1.1"/>
  <property name="version.eclipse.ecj" value="3.5.1"/>
  <property name="version.fasterxml" value="0.8.0"/>
  <property name="version.fungal" value="0.11.0.RC1"/>
  <property name="version.h2" value="1.3.170"/>
  <property name="version.hibernate-validator" value="5.0.1.Final"/>
  <property name="version.hornetq" value="2.2.19.Final"/>
  <property name="version.jasper" value="glassfish_2.1.0.v201004190952"/>
  <property name="version.jboss.common" value="2.2.17.GA"/>
  <property name="version.jboss.jandex" value="1.0.3.Final"/>
  <property name="version.jboss.jaspi.api" value="1.0.1.Final"/>
  <property name="version.jboss.jdeparser" value="1.0.0.Final"/>
  <property name="version.jboss.jms.api" value="1.0.0.Beta1"/>
  <property name="version.jboss.logging" value="3.1.2.GA"/>
  <property name="version.jboss.logging-processor" value="1.1.0.Final"/>
  <property name="version.jboss.logmanager" value="1.4.0.Final"/>
  <property name="version.jboss.logmanager.log4j" value="1.0.1.Final"/>
  <property name="version.jboss.naming" value="5.0.3.GA"/>
  <property name="version.jboss.netty" value="3.2.1.Final"/>
  <property name="version.jboss.picketbox" value="4.0.18.Final"/>
  <property name="version.jboss.security" value="2.1.0.20090318"/>
  <property name="version.jboss.shrinkwrap" value="1.0.1"/>
  <property name="version.jboss.shrinkwrap.descriptors" value="2.0.0-alpha-5"/>
  <property name="version.jboss.slf4j.logmanager" value="1.0.0.GA"/>
  <property name="version.jboss.stdio" value="1.0.1.GA"/>
  <property name="version.jboss.threads" value="2.0.0.GA"/>
  <property name="version.jboss.ts" value="5.0.0.M3"/>
  <property name="version.jboss.ts.spi" value="7.0.1.Final"/>
  <property name="version.jdepend" value="2.9.1"/>
  <property name="version.jetty" value="8.1.3.v20120416"/>
  <property name="version.jetty.el" value="2.2.4"/>
  <property name="version.jetty.jsp" value="2.2.1"/>
  <property name="version.jetty.servlet" value="3.0.1"/>
  <property name="version.jgroups" value="3.2.7.Final"/>
  <property name="version.juel" value="2.2.6"/>
  <property name="version.junit" value="4.10"/>
  <property name="version.maven" value="2.2.1"/>
  <property name="version.mockito" value="1.9.0"/>
  <property name="version.saxon" value="8.7"/>
  <property name="version.slf4j" value="1.6.1"/>
  <property name="version.transaction.api" value="1.0.0.Alpha3"/>
  <property name="version.validation-api" value="1.1.0.Final"/>

  <!-- ================================= 
       Paths              
       ================================= -->
  <path id="main.lib.path.id">
    <fileset dir="${lib.dir}/common">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/embedded">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/arquillian">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/byteman">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/jetty">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/hornetq">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/sjc">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/tools">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${target.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="as.lib.path.id">
    <fileset dir="${lib.dir}/as">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${target.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="test.lib.path.id">
    <fileset dir="${lib.dir}/common">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/sjc">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/embedded">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/arquillian">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/byteman">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/hornetq">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/test">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/tools">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${target.dir}">
       <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="checkstyle.lib.path.id">
    <fileset dir="${tools.dir}/checkstyle/lib"/>
    <fileset dir="${lib.dir}/common">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/embedded">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/arquillian">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/byteman">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/jetty">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/hornetq">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/sjc">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/test">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${lib.dir}/tools">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${target.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="findbugs.lib.path.id">
    <fileset dir="${tools.dir}/findbugs/lib"/>
  </path>

  <path id="jacoco.lib.path.id">
    <fileset dir="${tools.dir}/jacoco/lib"/>
  </path>

  <path id="tattletale.lib.path.id">
    <fileset dir="${tools.dir}/tattletale/lib"/>
  </path>

  <!-- ================================= 
       Bootstrap Ivy
       ================================= -->
  <mkdir dir="${ivy.dir}"/>
  <get usetimestamp="true" src="https://repository.apache.org/content/repositories/releases/org/apache/ivy/ivy/${ivy.version}/${ivy.jar.name}" 
       skipexisting="true"
       dest="${ivy.dir}/${ivy.jar.name}"/>
  <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${ivy.dir}/${ivy.jar.name}"/>

  <!-- ================================= 
       Target: init              
       ================================= -->
  <target name="init" depends="init-as-path">
    <fail message="IronJacamar requires JDK7+" unless="HAVE_JDK_1.7"/>
  
    <ivy:settings file="${basedir}/ivy.settings.xml"/>

    <mkdir dir="${build.dir}" />
    <mkdir dir="${target.dir}" />
  </target>

  <!-- ================================= 
       Target: resolve              
       ================================= -->
  <target name="resolve-as" if="as">
    <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]" 
                  conf="as"
                  sync="true"/>
  </target>

  <target name="resolve" depends="init,resolve-as" unless="as">
    <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]" 
                  conf="common,sjc,embedded,byteman,arquillian,jetty,hornetq,test,tools"
                  sync="true"/>
  </target>
  
  <!-- ================================= 
       Target: report              
       ================================= -->
  <target name="report" depends="resolve">
    <ivy:report todir="${target.dir}"/>
  </target>
  
  <!-- ================================= 
       Target: jars
       ================================= -->
  <target name="jars-base">
    <ant dir="api" inheritRefs="true" target="jars"/>
    <ant dir="common" inheritRefs="true" target="jars"/>
    <ant dir="core" inheritRefs="true" target="jars"/>
    <ant dir="validator" inheritRefs="true" target="jars"/>
    <ant dir="deployers" inheritRefs="true" target="jars"/>
    <ant dir="adapters" inheritRefs="true" target="jars"/>
  </target>

  <target name="jars" depends="resolve,jars-base" unless="as">
    <ant dir="embedded" inheritRefs="true" target="jars"/>
    <ant dir="arquillian" inheritRefs="true" target="jars"/>
    <ant dir="web" inheritRefs="true" target="jars"/>
    <ant dir="sjc" inheritRefs="true" target="jars"/>
    <ant dir="codegenerator" inheritRefs="true" target="jars"/>
    <ant dir="as" inheritRefs="true" target="jars"/>
    <ant dir="eis" inheritRefs="true" target="jars"/>
  </target>
  
  <!-- ================================= 
       Target: docs
       ================================= -->
  <target name="docs-base">
    <ant dir="api" inheritRefs="true" target="docs"/>
    <ant dir="common" inheritRefs="true" target="docs"/>
    <ant dir="core" inheritRefs="true" target="docs"/>
    <ant dir="validator" inheritRefs="true" target="docs"/>
    <ant dir="deployers" inheritRefs="true" target="docs"/>
    <ant dir="adapters" inheritRefs="true" target="docs"/>
  </target>

  <target name="docs" depends="jars,docs-base" unless="as">
    <ant dir="embedded" inheritRefs="true" target="docs"/>
    <ant dir="arquillian" inheritRefs="true" target="docs"/>
    <ant dir="web" inheritRefs="true" target="docs"/>
    <ant dir="sjc" inheritRefs="true" target="docs"/>
    <ant dir="codegenerator" inheritRefs="true" target="docs"/>
    <ant dir="as" inheritRefs="true" target="docs"/>
    <ant dir="eis" inheritRefs="true" target="docs"/>
  </target>
  
  <!-- ================================= 
       Target: manual
       ================================= -->
  <target name="manual">
    <ant dir="${doc.dir}/developerguide" inheritRefs="false" inheritAll="false"/>
    <ant dir="${doc.dir}/userguide" inheritRefs="false" inheritAll="false"/>
  </target>

  <!-- ================================= 
       Target: eclipse plugin
       ================================= -->
  <target name="eclipse" depends="jars">
    <ant dir="eclipse" inheritRefs="true" target="jars"/>
  </target>

  <!-- ================================= 
       Target: prepare test
       ================================= -->
  <target name="prepare-test" depends="jars">
    <ant dir="common" inheritRefs="true" target="prepare-test"/>
    <ant dir="core" inheritRefs="true" target="prepare-test"/>
    <ant dir="embedded" inheritRefs="true" target="prepare-test"/>
    <ant dir="arquillian" inheritRefs="true" target="prepare-test"/>
    <ant dir="deployers" inheritRefs="true" target="prepare-test"/>
    <ant dir="validator" inheritRefs="true" target="prepare-test"/>
    <ant dir="codegenerator" inheritRefs="true" target="prepare-test"/>
    <ant dir="adapters" inheritRefs="true" target="prepare-test"/>
    <ant dir="as" inheritRefs="true" target="prepare-test"/>
    <ant dir="eis" inheritRefs="true" target="prepare-test"/>
    <ant dir="sjc" inheritRefs="true" target="prepare-test"/>
  </target>
  
  <!-- ================================= 
       Target: test
       ================================= -->
  <target name="test" depends="prepare-test">
    <ant dir="common" inheritRefs="true" target="test"/>
    <ant dir="core" inheritRefs="true" target="test"/>
    <ant dir="embedded" inheritRefs="true" target="test"/>
    <ant dir="arquillian" inheritRefs="true" target="test"/>
    <ant dir="deployers" inheritRefs="true" target="test"/>
    <ant dir="validator" inheritRefs="true" target="test"/>
    <ant dir="adapters" inheritRefs="true" target="test"/>
    <ant dir="as" inheritRefs="true" target="test"/>
    <ant dir="eis" inheritRefs="true" target="test"/>
  </target>

  <!-- ================================= 
       Target: one-test
       ================================= -->
  <target name="one-test" depends="prepare-test">
    <condition property="module" else="core">
      <equals arg1="${module}" arg2="" trim="true"/> 
    </condition>

    <ant dir="${module}" inheritRefs="true" target="one-test"/>
  </target>

  <!-- ================================= 
       Target: module-test
       ================================= -->
  <target name="module-test" depends="prepare-test">
    <condition property="module" else="core">
      <equals arg1="${module}" arg2="" trim="true"/> 
    </condition>
  	
    <ant dir="${module}" inheritRefs="true" target="test"/>
  </target>

  <!-- ================================= 
       Target: mjvm-test
       ================================= -->
  <target name="mjvm-test" depends="prepare-test">
    <mkdir dir="${reports.dir}/core" />
    <ant dir="core" inheritRefs="true" target="mjvm-test"/>
  </target>
  
  <!-- ================================= 
       Target: artifacts
       ================================= -->
  <target name="artifacts-base">
    <ant dir="api" inheritRefs="true" target="artifacts"/>
    <ant dir="common" inheritRefs="true" target="artifacts"/>
    <ant dir="core" inheritRefs="true" target="artifacts"/>
    <ant dir="validator" inheritRefs="true" target="artifacts"/>
    <ant dir="deployers" inheritRefs="true" target="artifacts"/>
    <ant dir="adapters" inheritRefs="true" target="artifacts"/>
  </target>

  <target name="artifacts" depends="resolve,artifacts-base" unless="as">
    <ant dir="embedded" inheritRefs="true" target="artifacts"/>
    <ant dir="arquillian" inheritRefs="true" target="artifacts"/>
    <ant dir="codegenerator" inheritRefs="true" target="artifacts"/>
    <ant dir="as" inheritRefs="true" target="artifacts"/>
    <ant dir="eis" inheritRefs="true" target="artifacts"/>
  </target>
  
  <!-- ================================= 
       Target: sjc
       ================================= -->
  <target name="sjc" depends="jars">
    <ant dir="sjc" inheritRefs="true" target="sjc"/>
  </target>

  <!-- ================================= 
       Target: release
       ================================= -->
  <target name="release" depends="clean,sjc">
    <fail message="IronJacamar distribution requires eclipse.home setting" unless="eclipse.home"/>

    <delete dir="${build.dir}"/>

    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.dir}/${name}-${major}.${minor}.${patch}.${type}" />
    <mkdir dir="${build.dir}/${name}-${major}.${minor}.${patch}.${type}/doc" />
    <mkdir dir="${build.dir}/${name}-${major}.${minor}.${patch}.${type}/doc/spec" />

    <ant dir="${doc.dir}/samples/helloworld" target="dist-clean" inheritRefs="false" inheritAll="false"/>

    <ant dir="${doc.dir}/developerguide" target="pdf" inheritRefs="false" inheritAll="false"/>
    <ant dir="${doc.dir}/userguide" target="pdf" inheritRefs="false" inheritAll="false"/>

    <copy flatten="true" todir="${build.dir}/${name}-${major}.${minor}.${patch}.${type}/doc">
      <fileset dir="${target.dir}/docs">
        <include name="**/*.pdf"/>
      </fileset>
    </copy>

    <ant dir="sjc" inheritRefs="true" target="war"/>
    <delete dir="${build.dir}/sjc"/>

    <ant dir="api" inheritRefs="true" target="docs"/>
    <move todir="${build.dir}/${name}-${major}.${minor}.${patch}.${type}/doc/spec">
      <fileset dir="${target.dir}/docs/spec">
        <include name="**/*"/>
      </fileset>
    </move>
    <delete dir="${build.dir}/api"/>

    <copy todir="${build.dir}/${name}-${major}.${minor}.${patch}.${type}">
      <fileset dir="${target.dir}/sjc"/>
    </copy>
    <chmod perm="755" type="file">
      <fileset dir="${build.dir}/${name}-${major}.${minor}.${patch}.${type}">
        <include name="**/*.sh"/>
      </fileset>
    </chmod>
    <delete dir="${build.dir}/docbook"/>

    <!-- Eclipse -->
    <mkdir dir="${build.dir}/${name}-${major}.${minor}.${patch}.${type}/doc/eclipse" />
    <ant dir="eclipse" inheritRefs="true" target="jars"/>
    <copy todir="${build.dir}/${name}-${major}.${minor}.${patch}.${type}/doc/eclipse">
      <fileset dir="${target.dir}">
        <include name="${name}-eclipse.jar"/>
      </fileset>
    </copy>
    <copy todir="${build.dir}/${name}-${major}.${minor}.${patch}.${type}/doc/eclipse">
      <fileset dir="eclipse/src/main/resources">
        <include name="README.txt"/>
      </fileset>
    </copy>
    <delete dir="${build.dir}/eclipse"/>

    <zip destfile="${name}-${major}.${minor}.${patch}.${type}.zip">
      <zipfileset dir="${build.dir}" filemode="755" includes="**/*.sh"/>
      <zipfileset dir="${build.dir}" includes="**/*" excludes="**/*.sh"/>
    </zip>
    
    <tar destfile="${name}-${major}.${minor}.${patch}.${type}.tar">
      <tarfileset dir="${build.dir}" filemode="755" includes="**/*.sh"/>
      <tarfileset dir="${build.dir}" includes="**/*" excludes="**/*.sh"/>
    </tar>
    
    <gzip zipfile="${name}-${major}.${minor}.${patch}.${type}.tar.gz" 
          src="${name}-${major}.${minor}.${patch}.${type}.tar"/>
    
    <delete file="${name}-${major}.${minor}.${patch}.${type}.tar"/>
    
    <echo message="IronJacamar ${version} built with ${jdk_version}" />

  </target>

  <!-- ================================= 
       Target: checkstyle
       ================================= -->
  <target name="checkstyle" depends="jars">
    <taskdef name="checkstyle"
             classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"
             classpathref="checkstyle.lib.path.id"/>

    <mkdir dir="${reports.dir}/checkstyle" />

    <checkstyle config="${tools.dir}/checkstyle/checkstyle.xml"
                failOnViolation="false"
                classpathref="checkstyle.lib.path.id">
      <fileset dir="${basedir}">
        <include name="**/*.java"/>
        <exclude name="build/**/*.java"/>
      </fileset>
      <formatter type="plain"/>
      <formatter type="xml" toFile="${reports.dir}/checkstyle/checkstyle-result.xml"/>
    </checkstyle>
  </target>

  <!-- ================================= 
       Target: findbugs
       ================================= -->
  <target name="findbugs" depends="jars">
    <taskdef name="findbugs"
             classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
             classpathref="findbugs.lib.path.id"/>

    <mkdir dir="${reports.dir}/findbugs" />

    <findbugs home="${basedir}/tools/findbugs/lib/"
              output="html"
              outputFile="${reports.dir}/findbugs/findbugs.html" 
              excludeFilter="${basedir}/tools/findbugs/filter.xml"
              reportLevel="low">
      <auxClasspath>
        <fileset dir="${lib.dir}/common">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/embedded">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/arquillian">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/byteman">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/jetty">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/hornetq">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/sjc">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/test">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/tools">
          <include name="*.jar"/>
        </fileset>
      </auxClasspath>
      <class location="${target.dir}/${name}-arquillian-embedded-byteman.jar" />
      <class location="${target.dir}/${name}-arquillian-embedded.jar" />
      <class location="${target.dir}/${name}-as.jar" />
      <class location="${target.dir}/${name}-codegenerator.jar" />
      <class location="${target.dir}/${name}-common-api.jar" />
      <class location="${target.dir}/${name}-common-impl.jar" />
      <class location="${target.dir}/${name}-common-spi.jar" />
      <class location="${target.dir}/${name}-core-api.jar" />
      <class location="${target.dir}/${name}-core-impl.jar" />
      <class location="${target.dir}/${name}-deployers-common.jar" />
      <class location="${target.dir}/${name}-deployers-fungal.jar" />
      <class location="${target.dir}/${name}-embedded.jar" />
      <class location="${target.dir}/${name}-jdbc.jar" />
      <class location="${target.dir}/${name}-sjc.jar" />
      <class location="${target.dir}/${name}-spec-api.jar" />
      <class location="${target.dir}/${name}-test-eis.jar" />
      <class location="${target.dir}/${name}-validator-ant.jar" />
      <class location="${target.dir}/${name}-validator-cli.jar" />
      <class location="${target.dir}/${name}-validator-maven.jar" />
      <class location="${target.dir}/${name}-validator.jar" />
      <class location="${target.dir}/${name}-web-console.jar" />
      <class location="${target.dir}/${name}-web.jar" />
    </findbugs>

    <findbugs home="${basedir}/tools/findbugs/lib/"
              output="xml:withMessages"
              outputFile="${reports.dir}/findbugs/findbugs.xml" 
              excludeFilter="${basedir}/tools/findbugs/filter.xml"
              reportLevel="low">
      <auxClasspath>
        <fileset dir="${lib.dir}/common">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/embedded">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/arquillian">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/byteman">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/jetty">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/hornetq">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/sjc">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/test">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/tools">
          <include name="*.jar"/>
        </fileset>
      </auxClasspath>
      <class location="${target.dir}/${name}-arquillian-embedded-byteman.jar" />
      <class location="${target.dir}/${name}-arquillian-embedded.jar" />
      <class location="${target.dir}/${name}-as.jar" />
      <class location="${target.dir}/${name}-codegenerator.jar" />
      <class location="${target.dir}/${name}-common-api.jar" />
      <class location="${target.dir}/${name}-common-impl.jar" />
      <class location="${target.dir}/${name}-common-spi.jar" />
      <class location="${target.dir}/${name}-core-api.jar" />
      <class location="${target.dir}/${name}-core-impl.jar" />
      <class location="${target.dir}/${name}-deployers-common.jar" />
      <class location="${target.dir}/${name}-deployers-fungal.jar" />
      <class location="${target.dir}/${name}-embedded.jar" />
      <class location="${target.dir}/${name}-jdbc.jar" />
      <class location="${target.dir}/${name}-sjc.jar" />
      <class location="${target.dir}/${name}-spec-api.jar" />
      <class location="${target.dir}/${name}-test-eis.jar" />
      <class location="${target.dir}/${name}-validator-ant.jar" />
      <class location="${target.dir}/${name}-validator-cli.jar" />
      <class location="${target.dir}/${name}-validator-maven.jar" />
      <class location="${target.dir}/${name}-validator.jar" />
      <class location="${target.dir}/${name}-web-console.jar" />
      <class location="${target.dir}/${name}-web.jar" />
    </findbugs>
  </target>

  <!-- ================================= 
       Target: jacoco
       ================================= -->
  <target name="jacoco" depends="prepare-test">
    <taskdef name="jacoco-coverage" classname="org.jacoco.ant.CoverageTask">
      <classpath path="${basedir}/tools/jacoco/lib/jacocoant.jar"/>
    </taskdef>
    <taskdef name="jacoco-report" classname="org.jacoco.ant.ReportTask">
      <classpath path="${basedir}/tools/jacoco/lib/jacocoant.jar"/>
    </taskdef>

    <mkdir dir="${reports.dir}/jacoco"/>
    <mkdir dir="${reports.dir}/jacoco/tests"/>
    <mkdir dir="${reports.dir}/jacoco/html"/>
    <mkdir dir="${reports.dir}/jacoco/xml"/>

    <delete file="${reports.dir}/jacoco/jacoco.exec"/>
    <delete dir="${build.dir}/instrumented"/>
    
    <mkdir dir="${build.dir}/instrumented" />
    <copy todir="${build.dir}/instrumented">
      <fileset dir="${target.dir}">
        <include name="*.jar"/>
      </fileset>
    </copy>

    <copy todir="${build.dir}/instrumented">
      <fileset dir="${build.dir}/adapters">
        <include name="*.jar"/>
      </fileset>
    </copy>

    <jacoco-coverage destfile="${reports.dir}/jacoco/jacoco.exec">
      <junit dir="common/src/test"
             printsummary="${junit.printsummary}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             fork="yes"
             timeout="${junit.timeout}">
      
        <jvmarg line="${junit.jvm.options}"/>
        <sysproperty key="test.dir" value="${test.dir}"/>
        <sysproperty key="xb.builder.useUnorderedSequence" value="true"/>
        <sysproperty key="java.util.logging.manager" value="org.jboss.logmanager.LogManager"/>
        <sysproperty key="org.jboss.logging.Logger.pluginClass" value="org.jboss.logging.logmanager.LoggerPluginImpl"/>
        <sysproperty key="log4j.defaultInitOverride" value="true"/>

        <classpath>
          <fileset dir="${build.dir}/instrumented" includes="*.jar" />
          <pathelement location="${build.dir}/common/test"/>
          <fileset dir="${lib.dir}/common" includes="*.jar" />
          <fileset dir="${lib.dir}/embedded" includes="*.jar" />
          <fileset dir="${lib.dir}/arquillian" includes="*.jar" />
          <fileset dir="${lib.dir}/byteman" includes="*.jar" />
          <fileset dir="${lib.dir}/jetty" includes="*.jar" />
          <fileset dir="${lib.dir}/hornetq" includes="*.jar" />
          <fileset dir="${lib.dir}/sjc" includes="*.jar" />
          <fileset dir="${lib.dir}/test" includes="*.jar" />
          <fileset dir="${lib.dir}/tools" includes="*.jar" />
          <fileset dir="${java.home}/../lib/" includes="tools.jar" />
        </classpath>
        <classpath refid="jacoco.lib.path.id" />
        
        <formatter type="xml"/>
        
        <batchtest todir="${reports.dir}/jacoco/tests">
          <fileset dir="${build.dir}/common/test">
            <include name="**/*TestCase.class"/>
          </fileset>
        </batchtest>
      </junit>
    </jacoco-coverage>

    <jacoco-coverage destfile="${reports.dir}/jacoco/jacoco.exec">
      <junit dir="core/src/test"
             printsummary="${junit.printsummary}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             fork="yes"
             timeout="${junit.timeout}">
      
        <jvmarg line="${junit.jvm.options}"/>
        <sysproperty key="test.dir" value="${test.dir}"/>
        <sysproperty key="xb.builder.useUnorderedSequence" value="true"/>
        <sysproperty key="java.util.logging.manager" value="org.jboss.logmanager.LogManager"/>
        <sysproperty key="org.jboss.logging.Logger.pluginClass" value="org.jboss.logging.logmanager.LoggerPluginImpl"/>
        <sysproperty key="log4j.defaultInitOverride" value="true"/>

        <classpath>
          <fileset dir="${build.dir}/instrumented" includes="*.jar" />
          <pathelement location="${build.dir}/core/test"/>
          <fileset dir="${lib.dir}/common" includes="*.jar" />
          <fileset dir="${lib.dir}/embedded" includes="*.jar" />
          <fileset dir="${lib.dir}/arquillian" includes="*.jar" />
          <fileset dir="${lib.dir}/byteman" includes="*.jar" />
          <fileset dir="${lib.dir}/jetty" includes="*.jar" />
          <fileset dir="${lib.dir}/hornetq" includes="*.jar" />
          <fileset dir="${lib.dir}/sjc" includes="*.jar" />
          <fileset dir="${lib.dir}/test" includes="*.jar" />
          <fileset dir="${lib.dir}/tools" includes="*.jar" />
          <fileset dir="${java.home}/../lib/" includes="tools.jar" />
        </classpath>
        <classpath refid="jacoco.lib.path.id" />
      
        <formatter type="xml"/>
        
        <batchtest todir="${reports.dir}/jacoco/tests">
          <fileset dir="${build.dir}/core/test">
            <include name="**/*TestCase.class"/>
            <exclude name="**/*MJVMTestCase.class"/>
          </fileset>
        </batchtest>
      </junit>
    </jacoco-coverage>

    <jacoco-coverage destfile="${reports.dir}/jacoco/jacoco.exec">
      <junit dir="deployers/src/test"
             printsummary="${junit.printsummary}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             fork="yes"
             timeout="${junit.timeout}">
        
        <jvmarg line="${junit.jvm.options}"/>
        <sysproperty key="archives.dir" value="${build.dir}/deployers"/>
        <sysproperty key="test.dir" value="${test.dir}"/>
        <sysproperty key="java.util.logging.manager" value="org.jboss.logmanager.LogManager"/>
        <sysproperty key="org.jboss.logging.Logger.pluginClass" value="org.jboss.logging.logmanager.LoggerPluginImpl"/>
        <sysproperty key="log4j.defaultInitOverride" value="true"/>
        
        <classpath>
          <fileset dir="${build.dir}/instrumented" includes="*.jar" />
          <pathelement location="${build.dir}/deployers/test"/>
          <fileset dir="${lib.dir}/common" includes="*.jar" />
          <fileset dir="${lib.dir}/embedded" includes="*.jar" />
          <fileset dir="${lib.dir}/arquillian" includes="*.jar" />
          <fileset dir="${lib.dir}/byteman" includes="*.jar" />
          <fileset dir="${lib.dir}/jetty" includes="*.jar" />
          <fileset dir="${lib.dir}/hornetq" includes="*.jar" />
          <fileset dir="${lib.dir}/sjc" includes="*.jar" />
          <fileset dir="${lib.dir}/test" includes="*.jar" />
          <fileset dir="${lib.dir}/tools" includes="*.jar" />
          <fileset dir="${java.home}/../lib/" includes="tools.jar" />
        </classpath>
        <classpath refid="jacoco.lib.path.id" />
        
        <formatter type="xml"/>
        
        <batchtest todir="${reports.dir}/jacoco/tests">
          <fileset dir="${build.dir}/deployers/test">
            <include name="**/*TestCase.class"/>
          </fileset>
        </batchtest>
      </junit>
    </jacoco-coverage>
 
    <jacoco-coverage destfile="${reports.dir}/jacoco/jacoco.exec"
                     excludes="org.jboss.jca.embedded.dsl.datasources10.api.*:org.jboss.jca.embedded.dsl.datasources10.impl.*:org.jboss.jca.embedded.dsl.datasources11.api.*:org.jboss.jca.embedded.dsl.datasources11.impl.*:org.jboss.jca.embedded.dsl.datasources12.api.*:org.jboss.jca.embedded.dsl.datasources12.impl.*:org.jboss.jca.embedded.dsl.ironjacamar10.api.*:org.jboss.jca.embedded.dsl.ironjacamar10.impl.*:org.jboss.jca.embedded.dsl.ironjacamar11.api.*:org.jboss.jca.embedded.dsl.ironjacamar11.impl.*:org.jboss.jca.embedded.dsl.resourceadapters10.api.*:org.jboss.jca.embedded.dsl.resourceadapters10.impl.*:org.jboss.jca.embedded.dsl.resourceadapters11.api.*:org.jboss.jca.embedded.dsl.resourceadapters11.impl.*:org.jboss.shrinkwrap.descriptor.api.connector15.*:org.jboss.shrinkwrap.descriptor.api.connector16.*:org.jboss.shrinkwrap.descriptor.api.connector17.*:org.jboss.shrinkwrap.descriptor.api.j2ee14.*:org.jboss.shrinkwrap.descriptor.api.javaee6.*:org.jboss.shrinkwrap.descriptor.api.javaee7.*:org.jboss.shrinkwrap.descriptor.impl.connector10.*:org.jboss.shrinkwrap.descriptor.impl.connector15.*:org.jboss.shrinkwrap.descriptor.impl.connector16.*:org.jboss.shrinkwrap.descriptor.impl.connector17.*:org.jboss.shrinkwrap.descriptor.impl.j2ee14.*:org.jboss.shrinkwrap.descriptor.impl.javaee6.*:org.jboss.shrinkwrap.descriptor.impl.javaee7.*">
      <junit dir="embedded/src/test"
             printsummary="${junit.printsummary}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             fork="yes"
             timeout="${junit.timeout}">
        
        <jvmarg line="${junit.jvm.options}"/>
        <sysproperty key="test.dir" value="${test.dir}"/>
        <sysproperty key="xb.builder.useUnorderedSequence" value="true"/>
        <sysproperty key="java.util.logging.manager" value="org.jboss.logmanager.LogManager"/>
        <sysproperty key="org.jboss.logging.Logger.pluginClass" value="org.jboss.logging.logmanager.LoggerPluginImpl"/>
        <sysproperty key="log4j.defaultInitOverride" value="true"/>
        
        <classpath>
          <fileset dir="${build.dir}/instrumented" includes="*.jar" />
          <pathelement location="${build.dir}/embedded/test"/>
          <fileset dir="${lib.dir}/common" includes="*.jar" />
          <fileset dir="${lib.dir}/embedded" includes="*.jar" />
          <fileset dir="${lib.dir}/arquillian" includes="*.jar" />
          <fileset dir="${lib.dir}/byteman" includes="*.jar" />
          <fileset dir="${lib.dir}/jetty" includes="*.jar" />
          <fileset dir="${lib.dir}/hornetq" includes="*.jar" />
          <fileset dir="${lib.dir}/sjc" includes="*.jar" />
          <fileset dir="${lib.dir}/test" includes="*.jar" />
          <fileset dir="${lib.dir}/tools" includes="*.jar" />
          <fileset dir="${java.home}/../lib/" includes="tools.jar" />
        </classpath>
        <classpath refid="jacoco.lib.path.id" />
        
        <formatter type="xml"/>
        
        <batchtest todir="${reports.dir}/jacoco/tests">
          <fileset dir="${build.dir}/embedded/test">
            <include name="**/*TestCase.class"/>
          </fileset>
        </batchtest>
      </junit>
    </jacoco-coverage>

    <jacoco-coverage destfile="${reports.dir}/jacoco/jacoco.exec">
      <junit dir="arquillian/src/test"
             printsummary="${junit.printsummary}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             fork="yes"
             timeout="${junit.timeout}">
      
        <jvmarg line="${junit.jvm.options}"/>
        <sysproperty key="test.dir" value="${test.dir}"/>
        <sysproperty key="xb.builder.useUnorderedSequence" value="true"/>
        <sysproperty key="java.util.logging.manager" value="org.jboss.logmanager.LogManager"/>
        <sysproperty key="org.jboss.logging.Logger.pluginClass" value="org.jboss.logging.logmanager.LoggerPluginImpl"/>
        <sysproperty key="log4j.defaultInitOverride" value="true"/>

        <classpath>
          <fileset dir="${build.dir}/instrumented" includes="*.jar" />
          <pathelement location="${build.dir}/arquillian/test"/>
          <fileset dir="${lib.dir}/common" includes="*.jar" />
          <fileset dir="${lib.dir}/embedded" includes="*.jar" />
          <fileset dir="${lib.dir}/arquillian" includes="*.jar" />
          <fileset dir="${lib.dir}/byteman" includes="*.jar" />
          <fileset dir="${lib.dir}/jetty" includes="*.jar" />
          <fileset dir="${lib.dir}/hornetq" includes="*.jar" />
          <fileset dir="${lib.dir}/sjc" includes="*.jar" />
          <fileset dir="${lib.dir}/test" includes="*.jar" />
          <fileset dir="${lib.dir}/tools" includes="*.jar" />
          <fileset dir="${java.home}/../lib/" includes="tools.jar" />
        </classpath>
        <classpath refid="jacoco.lib.path.id" />
        
        <formatter type="xml"/>
        
        <batchtest todir="${reports.dir}/jacoco/tests">
          <fileset dir="${build.dir}/arquillian/test">
            <include name="**/*TestCase.class"/>
          </fileset>
        </batchtest>
      </junit>
    </jacoco-coverage>

    <jacoco-coverage destfile="${reports.dir}/jacoco/jacoco.exec">
      <junit dir="validator/src/test"
             printsummary="${junit.printsummary}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             fork="yes"
             timeout="${junit.timeout}">
        
        <jvmarg line="${junit.jvm.options}"/>
        <sysproperty key="test.dir" value="${test.dir}"/>
        <sysproperty key="xb.builder.useUnorderedSequence" value="true"/>
        <sysproperty key="java.util.logging.manager" value="org.jboss.logmanager.LogManager"/>
        <sysproperty key="org.jboss.logging.Logger.pluginClass" value="org.jboss.logging.logmanager.LoggerPluginImpl"/>
        <sysproperty key="log4j.defaultInitOverride" value="true"/>

        <classpath>
          <fileset dir="${build.dir}/instrumented" includes="*.jar" />
          <pathelement location="${build.dir}/validator/test"/>
          <fileset dir="${lib.dir}/common" includes="*.jar" />
          <fileset dir="${lib.dir}/embedded" includes="*.jar" />
          <fileset dir="${lib.dir}/arquillian" includes="*.jar" />
          <fileset dir="${lib.dir}/byteman" includes="*.jar" />
          <fileset dir="${lib.dir}/jetty" includes="*.jar" />
          <fileset dir="${lib.dir}/hornetq" includes="*.jar" />
          <fileset dir="${lib.dir}/sjc" includes="*.jar" />
          <fileset dir="${lib.dir}/test" includes="*.jar" />
          <fileset dir="${lib.dir}/tools" includes="*.jar" />
          <fileset dir="${java.home}/../lib/" includes="tools.jar" />
        </classpath>
        <classpath refid="jacoco.lib.path.id" />
        
        <formatter type="xml"/>
        
        <batchtest todir="${reports.dir}/jacoco/tests">
          <fileset dir="${build.dir}/validator/test">
            <include name="**/*TestCase.class"/>
          </fileset>
        </batchtest>
      </junit>
    </jacoco-coverage>

    <jacoco-coverage destfile="${reports.dir}/jacoco/jacoco.exec">
      <junit dir="codegenerator/src/test"
             printsummary="${junit.printsummary}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             fork="yes"
             timeout="${junit.timeout}">
        
        <jvmarg line="${junit.jvm.options}"/>
        <sysproperty key="test.dir" value="${test.dir}"/>
        <sysproperty key="xb.builder.useUnorderedSequence" value="true"/>
        <sysproperty key="java.util.logging.manager" value="org.jboss.logmanager.LogManager"/>
        <sysproperty key="org.jboss.logging.Logger.pluginClass" value="org.jboss.logging.logmanager.LoggerPluginImpl"/>
        <sysproperty key="log4j.defaultInitOverride" value="true"/>
        
        <classpath>
          <fileset dir="${build.dir}/instrumented" includes="*.jar" />
          <pathelement location="${build.dir}/codegenerator/test"/>
          <fileset dir="${lib.dir}/common" includes="*.jar" />
          <fileset dir="${lib.dir}/embedded" includes="*.jar" />
          <fileset dir="${lib.dir}/arquillian" includes="*.jar" />
          <fileset dir="${lib.dir}/byteman" includes="*.jar" />
          <fileset dir="${lib.dir}/jetty" includes="*.jar" />
          <fileset dir="${lib.dir}/hornetq" includes="*.jar" />
          <fileset dir="${lib.dir}/sjc" includes="*.jar" />
          <fileset dir="${lib.dir}/test" includes="*.jar" />
          <fileset dir="${lib.dir}/tools" includes="*.jar" />
          <fileset dir="${java.home}/../lib/" includes="tools.jar" />
        </classpath>
        <classpath refid="jacoco.lib.path.id" />
        
        <formatter type="xml"/>
        
        <batchtest todir="${reports.dir}/jacoco/tests">
          <fileset dir="${build.dir}/codegenerator/test">
            <include name="**/*TestCase.class"/>
          </fileset>
        </batchtest>
      </junit>
    </jacoco-coverage>

    <jacoco-coverage destfile="${reports.dir}/jacoco/jacoco.exec">
      <junit dir="adapters/src/test"
             printsummary="${junit.printsummary}"
             haltonerror="${junit.haltonerror}"
             haltonfailure="${junit.haltonfailure}"
             fork="yes"
             timeout="${junit.timeout}">
        
        <jvmarg line="${junit.jvm.options}"/>
        <sysproperty key="test.dir" value="${test.dir}"/>
        <sysproperty key="archives.dir" value="${build.dir}/adapters"/>
        <sysproperty key="xb.builder.useUnorderedSequence" value="true"/>
        <sysproperty key="java.util.logging.manager" value="org.jboss.logmanager.LogManager"/>
        <sysproperty key="org.jboss.logging.Logger.pluginClass" value="org.jboss.logging.logmanager.LoggerPluginImpl"/>
        <sysproperty key="log4j.defaultInitOverride" value="true"/>
        
        <classpath>
          <fileset dir="${build.dir}/instrumented" includes="*.jar" />
          <pathelement location="${build.dir}/adapters/"/>
          <pathelement location="${build.dir}/adapters/test"/>
          <fileset dir="${lib.dir}/common" includes="*.jar" />
          <fileset dir="${lib.dir}/embedded" includes="*.jar" />
          <fileset dir="${lib.dir}/arquillian" includes="*.jar" />
          <fileset dir="${lib.dir}/byteman" includes="*.jar" />
          <fileset dir="${lib.dir}/jetty" includes="*.jar" />
          <fileset dir="${lib.dir}/hornetq" includes="*.jar" />
          <fileset dir="${lib.dir}/sjc" includes="*.jar" />
          <fileset dir="${lib.dir}/test" includes="*.jar" />
          <fileset dir="${lib.dir}/tools" includes="*.jar" />
          <fileset dir="${java.home}/../lib/" includes="tools.jar" />
        </classpath>
        <classpath refid="jacoco.lib.path.id" />
        
        <formatter type="xml"/>
        
        <batchtest todir="${reports.dir}/jacoco/tests">
          <fileset dir="${build.dir}/adapters/test">
            <include name="**/*TestCase.class"/>
          </fileset>
        </batchtest>
      </junit>
    </jacoco-coverage>

    <!-- Workaround for jacoco-plugin classes -->
    <mkdir dir="${build.dir}/jacoco-classes"/>
    <copy todir="${build.dir}/jacoco-classes">
      <fileset dir="${build.dir}/adapters/impl"/>
    </copy>
    <copy todir="${build.dir}/jacoco-classes">
      <fileset dir="${build.dir}/api"/>
    </copy>
    <copy todir="${build.dir}/jacoco-classes">
      <fileset dir="${build.dir}/arquillian/impl"/>
    </copy>
    <copy todir="${build.dir}/jacoco-classes">
      <fileset dir="${build.dir}/as/impl"/>
    </copy>
    <copy todir="${build.dir}/jacoco-classes">
      <fileset dir="${build.dir}/codegenerator/impl"/>
    </copy>
    <copy todir="${build.dir}/jacoco-classes">
      <fileset dir="${build.dir}/common/impl"/>
    </copy>
    <copy todir="${build.dir}/jacoco-classes">
      <fileset dir="${build.dir}/core/impl"/>
    </copy>
    <copy todir="${build.dir}/jacoco-classes">
      <fileset dir="${build.dir}/deployers/impl"/>
    </copy>
    <copy todir="${build.dir}/jacoco-classes">
      <fileset dir="${build.dir}/eis/impl"/>
    </copy>
    <copy todir="${build.dir}/jacoco-classes">
      <fileset dir="${build.dir}/embedded/impl"/>
    </copy>
    <copy todir="${build.dir}/jacoco-classes">
      <fileset dir="${build.dir}/sjc/impl"/>
    </copy>
    <copy todir="${build.dir}/jacoco-classes">
      <fileset dir="${build.dir}/validator/impl"/>
    </copy>
    <copy todir="${build.dir}/jacoco-classes">
      <fileset dir="${build.dir}/web/impl"/>
    </copy>

    <jacoco-report>
      <executiondata>
        <file file="${reports.dir}/jacoco/jacoco.exec"/>
      </executiondata>
      <structure name="IronJacamar">
        <classfiles>
          <fileset dir="${build.dir}/jacoco-classes">
            <include name="**/*.class"/>
            <exclude name="**/embedded/dsl/**"/>
            <exclude name="**/shrinkwrap/descriptor/**"/>
          </fileset>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="api/src/main/java">
            <include name="**/*.java" />
          </fileset>
          <fileset dir="adapters/src/main/java">
            <include name="**/*.java" />
          </fileset>
          <fileset dir="arquillian/src/main/java">
            <include name="**/*.java" />
          </fileset>
          <fileset dir="codegenerator/src/main/java">
            <include name="**/*.java" />
          </fileset>
          <fileset dir="common/src/main/java">
            <include name="**/*.java" />
          </fileset>
          <fileset dir="core/src/main/java">
            <include name="**/*.java" />
          </fileset>
          <fileset dir="deployers/src/main/java">
            <include name="**/*.java" />
          </fileset>
          <fileset dir="embedded/src/main/java">
            <include name="**/*.java" />
          </fileset>
          <fileset dir="sjc/src/main/java">
            <include name="**/*.java" />
          </fileset>
          <fileset dir="validator/src/main/java">
            <include name="**/*.java" />
          </fileset>
          <fileset dir="web/src/main/java">
            <include name="**/*.java" />
          </fileset>
        </sourcefiles>
      </structure>
      <html destdir="${reports.dir}/jacoco/html"/>
      <xml destfile="${reports.dir}/jacoco/xml/jacoco.xml"/>
    </jacoco-report>

  </target>

  <!-- ================================= 
       Target: tattletale
       ================================= -->
  <target name="tattletale" depends="sjc">
    <taskdef name="report"
             classname="org.jboss.tattletale.ant.ReportTask"
             classpathref="tattletale.lib.path.id"/>

    <mkdir dir="${reports.dir}/tattletale"/>

    <report source="${target.dir}/sjc"
            destination="${reports.dir}/tattletale"
            configuration="${tools.dir}/tattletale/configuration.properties"
            filter="${tools.dir}/tattletale/filter.properties"
            profiles="java6"/>
  </target>

  <!-- ================================= 
       Target: clean              
       ================================= -->
  <target name="clean">
    <delete>
      <fileset dir="${basedir}" defaultexcludes="no">
        <include name="**/*~"/>
        <include name="**/*.bak"/>
      </fileset>
    </delete>
    <delete failonerror="false">
      <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </delete>
    <delete dir="${build.dir}"/>
    <delete dir="${target.dir}"/>
    <delete dir="${reports.dir}"/>
    <delete file="${name}-${major}.${minor}.${patch}.${type}.zip" />
    <delete file="${name}-${major}.${minor}.${patch}.${type}.tar.gz" />
    <delete file="transaction.log" />

    <ant antfile="tools/docant/build.xml" target="clean" inheritrefs="false" inheritAll="false"/>
    <delete dir="${doc.dir}/target"/>
    <delete failonerror="false">
      <fileset dir="eclipse/libs" includes="**/*.jar"/>
    </delete>
  </target>
  
  <!-- ================================= 
       Target: clean-cache              
       ================================= -->
  <target name="clean-cache">
    <ivy:cleancache />
  </target>

  <!-- ================================= 
       Target: nexus
       ================================= -->
  <macrodef name="deploy-file">
    <attribute name="file"/>
    <attribute name="artifact"/>
    <attribute name="extension"/>
    <sequential>
      <concat destfile="${target.dir}/@{file}" append="true" force="true" eol="unix">
mvn -s ${mavensettings} org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file -Dfile=$PWD/@{artifact}.@{extension} -DpomFile=@{artifact}.xml -Dsources=$PWD/@{artifact}-sources.jar -Djavadoc=$PWD/@{artifact}-javadoc.jar $REPOSITORY
</concat>
    </sequential>
  </macrodef>

  <macrodef name="install-file">
    <attribute name="file"/>
    <attribute name="artifact"/>
    <attribute name="extension"/>
    <sequential>
      <concat destfile="${target.dir}/@{file}" append="true" force="true" eol="unix">
mvn install:install-file -Dfile=$PWD/@{artifact}.@{extension} -DpomFile=@{artifact}.xml -Dsources=$PWD/@{artifact}-sources.jar -Djavadoc=$PWD/@{artifact}-javadoc.jar
</concat>
    </sequential>
  </macrodef>

  <target name="nexus-base">
    <delete file="${target.dir}/deploy.sh"/>
    <delete file="${target.dir}/install.sh"/>

    <concat destfile="${target.dir}/deploy.sh" append="true" force="true" eol="unix">#!/bin/sh
PWD=`pwd`
VERSION=${version}
REPOSITORY='-Durl=${repositoryurl} -DrepositoryId=${repositoryid}'
</concat>

    <concat destfile="${target.dir}/install.sh" append="true" force="true" eol="unix">#!/bin/sh
PWD=`pwd`
VERSION=${version}
</concat>

    <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]" 
                  conf="${name}-common-api,${name}-common-impl,${name}-common-spi,${name}-core-api,${name}-core-impl,${name}-deployers-common,${name}-validator"
                  sync="true"/>

    <!-- ironjacamar-spec-api -->
    <delete file="${target.dir}/${name}-spec-api.xml"/>
    <ivy:makepom artifactName="${name}-spec-api" 
                 conf="${name}-spec-api"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-spec-api.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-spec-api" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-spec-api" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-spec-api" extension="jar"/>

    <!-- ironjacamar-common-api -->
    <delete file="${target.dir}/${name}-common-api.xml"/>
    <ivy:makepom artifactName="${name}-common-api" 
                 conf="${name}-common-api"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-common-api.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-common-api" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-common-api" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-common-api" extension="jar"/>

    <!-- ironjacamar-common-impl -->
    <delete file="${target.dir}/${name}-common-impl.xml"/>
    <ivy:makepom artifactName="${name}-common-impl" 
                 conf="${name}-common-impl"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-common-impl.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-common-impl" scope="runtime"/>
      <dependency artifact="${name}-common-api" scope="runtime"/>
      <dependency artifact="${name}-common-spi" scope="runtime"/>
      <dependency artifact="${name}-spec-api" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-common-impl" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-common-impl" extension="jar"/>

    <!-- ironjacamar-common-spi -->
    <delete file="${target.dir}/${name}-common-spi.xml"/>
    <ivy:makepom artifactName="${name}-common-spi" 
                 conf="${name}-common-spi"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-common-spi.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-common-spi" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-common-spi" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-common-spi" extension="jar"/>

    <!-- ironjacamar-core-api -->
    <delete file="${target.dir}/${name}-core-api.xml"/>
    <ivy:makepom artifactName="${name}-core-api" 
                 conf="${name}-core-api"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-core-api.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-core-api" scope="runtime"/>
      <dependency artifact="${name}-spec-api" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-core-api" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-core-api" extension="jar"/>

    <!-- ironjacamar-core-impl -->
    <delete file="${target.dir}/${name}-core-impl.xml"/>
    <ivy:makepom artifactName="${name}-core-impl" 
                 conf="${name}-core-impl"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-core-impl.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-core-impl" scope="runtime"/>
      <dependency artifact="${name}-common-impl" scope="runtime"/>
      <dependency artifact="${name}-core-api" scope="runtime"/>
      <dependency artifact="${name}-spec-api" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-core-impl" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-core-impl" extension="jar"/>

    <!-- ironjacamar-deployers-common -->
    <delete file="${target.dir}/${name}-deployers-common.xml"/>
    <ivy:makepom artifactName="${name}-deployers-common" 
                 conf="${name}-deployers-common"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-deployers-common.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-deployers-common" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-deployers-common" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-deployers-common" extension="jar"/>

    <!-- ironjacamar-validator -->
    <delete file="${target.dir}/${name}-validator.xml"/>
    <ivy:makepom artifactName="${name}-validator" 
                 conf="${name}-validator"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-validator.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-validator" scope="runtime"/>
      <dependency artifact="${name}-common-api" scope="runtime"/>
      <dependency artifact="${name}-common-impl" scope="runtime"/>
      <dependency artifact="${name}-common-spi" scope="runtime"/>
      <dependency artifact="${name}-spec-api" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-validator" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-validator" extension="jar"/>

    <!-- ironjacamar-jdbc -->
    <delete file="${target.dir}/${name}-jdbc.xml"/>
    <ivy:makepom artifactName="${name}-jdbc" 
                conf="${name}-jdbc"
                ivyfile="${basedir}/ivy.xml" 
                pomfile="${target.dir}/${name}-jdbc.xml"
                headerFile="${tools.dir}/mvn/HEADER"
                templatefile="${tools.dir}/mvn/pom.template"
                printIvyInfo="false">
      <mapping conf="${name}-jdbc" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-jdbc" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-jdbc" extension="jar"/>
  	
  </target>

  <target name="nexus" depends="clean,artifacts,nexus-base" unless="as">
    <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]" 
                  conf="${name}-as,${name}-codegenerator,${name}-deployers-fungal,${name}-embedded,${name}-arquillian-embedded,${name}-arquillian-embedded-byteman,${name}-spec-api,${name}-test-eis,${name}-validator-ant,${name}-validator-cli,jdbc-local,jdbc-xa"
                  sync="true"/>

    <!-- ironjacamar-as -->
    <delete file="${target.dir}/${name}-as.xml"/>
    <ivy:makepom artifactName="${name}-as" 
                 conf="${name}-as"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-as.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-as" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-as" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-as" extension="jar"/>

    <!-- ironjacamar-codegenerator -->
    <delete file="${target.dir}/${name}-codegenerator.xml"/>
    <ivy:makepom artifactName="${name}-codegenerator" 
                 conf="${name}-codegenerator"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-codegenerator.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-codegenerator" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-codegenerator" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-codegenerator" extension="jar"/>

    <!-- ironjacamar-depchain -->
    <delete file="${target.dir}/${name}-depchain.xml"/>
    <ivy:makepom artifactName="${name}-depchain" 
                 conf="${name}-depchain"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-depchain.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-depchain" scope="runtime"/>
    </ivy:makepom>

    <concat destfile="${target.dir}/deploy.sh" append="true" force="true" eol="unix">
mvn -s ${mavensettings} org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file -Dfile=$PWD/${name}-depchain.xml -DpomFile=${name}-depchain.xml $REPOSITORY
</concat>
<concat destfile="${target.dir}/install.sh" append="true" force="true" eol="unix">
mvn install:install-file -Dfile=$PWD/${name}-depchain.xml -DpomFile=${name}-depchain.xml -DuniqueVersion=false $REPOSITORY
</concat>

    <!-- ironjacamar-deployers-fungal -->
    <delete file="${target.dir}/${name}-deployers-fungal.xml"/>
    <ivy:makepom artifactName="${name}-deployers-fungal" 
                 conf="${name}-deployers-fungal"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-deployers-fungal.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-deployers-fungal" scope="runtime"/>
      <dependency artifact="${name}-common-impl" scope="runtime"/>
      <dependency artifact="${name}-core-api" scope="runtime"/>
      <dependency artifact="${name}-core-impl" scope="runtime"/>
      <dependency artifact="${name}-spec-api" scope="runtime"/>
      <dependency artifact="${name}-validator" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-deployers-fungal" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-deployers-fungal" extension="jar"/>

    <!-- ironjacamar-embedded -->
    <delete file="${target.dir}/${name}-embedded.xml"/>
    <ivy:makepom artifactName="${name}-embedded" 
                 conf="${name}-embedded"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-embedded.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-embedded" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-embedded" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-embedded" extension="jar"/>

    <!-- ironjacamar-arquillian-embedded -->
    <delete file="${target.dir}/${name}-arquillian-embedded.xml"/>
    <ivy:makepom artifactName="${name}-arquillian-embedded" 
                 conf="${name}-arquillian-embedded"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-arquillian-embedded.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-arquillian-embedded" scope="runtime"/>
      <dependency artifact="${name}-embedded" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-arquillian-embedded" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-arquillian-embedded" extension="jar"/>

    <!-- ironjacamar-arquillian-embedded-byteman -->
    <delete file="${target.dir}/${name}-arquillian-embedded-byteman.xml"/>
    <ivy:makepom artifactName="${name}-arquillian-embedded-byteman" 
                 conf="${name}-arquillian-embedded-byteman"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-arquillian-embedded-byteman.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-arquillian-embedded-byteman" scope="runtime"/>
      <dependency artifact="${name}-embedded" scope="runtime"/>
      <dependency artifact="${name}-arquillian-embedded" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-arquillian-embedded-byteman" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-arquillian-embedded-byteman" extension="jar"/>

    <!-- ironjacamar-test-eis -->
    <delete file="${target.dir}/${name}-test-eis.xml"/>
    <ivy:makepom artifactName="${name}-test-eis" 
                 conf="${name}-test-eis"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-test-eis.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-test-eis" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-test-eis" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-test-eis" extension="jar"/>

    <!-- ironjacamar-validator-ant -->
    <delete file="${target.dir}/${name}-validator-ant.xml"/>
    <ivy:makepom artifactName="${name}-validator-ant" 
                 conf="${name}-validator-ant"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-validator-ant.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-validator-ant" scope="runtime"/>
      <dependency artifact="${name}-validator" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-validator-ant" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-validator-ant" extension="jar"/>

    <!-- ironjacamar-validator-cli -->
    <delete file="${target.dir}/${name}-validator-cli.xml"/>
    <ivy:makepom artifactName="${name}-validator-cli" 
                 conf="${name}-validator-cli"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-validator-cli.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-validator-cli" scope="runtime"/>
      <dependency artifact="${name}-validator" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-validator-cli" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-validator-cli" extension="jar"/>

    <!-- ironjacamar-validator-maven -->
    <delete file="${target.dir}/${name}-validator-maven.xml"/>
    <ivy:makepom artifactName="${name}-validator-maven" 
                 conf="${name}-validator-maven"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/${name}-validator-maven.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="${name}-validator-maven" scope="runtime"/>
      <dependency artifact="${name}-validator" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="${name}-validator-maven" extension="jar"/>
    <install-file file="install.sh" artifact="${name}-validator-maven" extension="jar"/>

    <!-- jdbc-local -->
    <delete file="${target.dir}/jdbc-local.xml"/>
    <ivy:makepom artifactName="jdbc-local" 
                 conf="jdbc-local"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/jdbc-local.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="jdbc-local" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="jdbc-local" extension="rar"/>
    <install-file file="install.sh" artifact="jdbc-local" extension="rar"/>

    <!-- jdbc-xa -->
    <delete file="${target.dir}/jdbc-xa.xml"/>
    <ivy:makepom artifactName="jdbc-xa" 
                 conf="jdbc-xa"
                 ivyfile="${basedir}/ivy.xml" 
                 pomfile="${target.dir}/jdbc-xa.xml"
                 headerFile="${tools.dir}/mvn/HEADER"
                 templatefile="${tools.dir}/mvn/pom.template"
                 printIvyInfo="false">
      <mapping conf="jdbc-xa" scope="runtime"/>
    </ivy:makepom>

    <deploy-file file="deploy.sh" artifact="jdbc-xa" extension="rar"/>
    <install-file file="install.sh" artifact="jdbc-xa" extension="rar"/>

    <chmod file="${target.dir}/deploy.sh" perm="755"/>
    <chmod file="${target.dir}/install.sh" perm="755"/>

  </target>

  <target name="init-as-path" if="as">
    <path id="main.lib.path.id">
      <path refid="as.lib.path.id"/>
    </path>
  </target>
</project>
