<?xml version="1.0" encoding="UTF-8"?>

<connector xmlns="http://java.sun.com/xml/ns/j2ee"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
                               http://java.sun.com/xml/ns/j2ee/connector_1_5.xsd"
           version="1.5">
  
  <description>Resource Adapter for JDBC 4 XA drivers</description>
  <display-name>JDBC XATransaction ResourceAdapter</display-name>
  
  <vendor-name>Red Hat Inc</vendor-name>
  <eis-type>JDBC 4.0 XA Relational Database</eis-type>
  <resourceadapter-version>7.0</resourceadapter-version>
   
  <license>
    <description>
IronJacamar, a Java EE Connector Architecture implementation
Copyright 2010, Red Hat Inc, and individual contributors
as indicated by the @author tags. See the copyright.txt file in the
distribution for a full listing of individual contributors.

This is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation; either version 2.1 of
the License, or (at your option) any later version.

This software is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this software; if not, write to the Free
Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
02110-1301 USA, or see the FSF site: http://www.fsf.org.
    </description>
    <license-required>true</license-required>
  </license>
   
  <resourceadapter>
    <outbound-resourceadapter>
      <connection-definition>
        <managedconnectionfactory-class>org.jboss.jca.adapters.jdbc.xa.XAManagedConnectionFactory</managedconnectionfactory-class>
        <config-property>
          <description>The default user name used to create JDBC connections.</description>
          <config-property-name>UserName</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>The default password used to create JDBC connections.</description>
          <config-property-name>Password</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>The properties to set up the XA driver. These properties must be in the form name1=value1;name2=value2;...namen=valuen</description>
          <config-property-name>XADataSourceProperties</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>The jdbc connection url delimeter.</description>
          <config-property-name>URLDelimiter</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>The property that contains the list of URLs.</description>
          <config-property-name>URLProperty</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>The configurable URLSelectorStrategy class name.</description>
          <config-property-name>UrlSelectorStrategyClassName</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>The class name of the JDBC XA driver that handlesthis JDBC URL.</description>
          <config-property-name>XADataSourceClass</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>The transaction isolation for new connections. Not necessary: the driver default will be used if ommitted.</description>
          <config-property-name>TransactionIsolation</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>The number of cached prepared statements per connection.</description>
          <config-property-name>PreparedStatementCacheSize</config-property-name>
          <config-property-type>java.lang.Integer</config-property-type>
        </config-property>
        <config-property>
          <description>Whether to share prepared statements.</description>
          <config-property-name>SharePreparedStatements</config-property-name>
          <config-property-type>java.lang.Boolean</config-property-type>
        </config-property>
        <config-property>
          <description>An SQL statement to be executed when a new connection is created as auxillary setup.</description>
          <config-property-name>NewConnectionSQL</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>An SQL statement that may be executed when a managed connection is taken out of the pool and is about to be given to a client: the purpose is to verify that the connection still works.</description>
          <config-property-name>CheckValidConnectionSQL</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>The fully qualified name of a class implementing org.jboss.jca.adapters.jdbc.ValidConnectionChecker that can determine for a particular vender db when a connection is valid.</description>
          <config-property-name>ValidConnectionCheckerClassName</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>TThe properties to inect into class implementing org.jboss.jca.adapters.jdbc.ValidConnectionChecker that can determine for a particular vender db when a connection is valid.</description>
          <config-property-name>ValidConnectionCheckerProperties</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>The fully qualified name of a class implementing org.jboss.jca.adapters.jdbc.ExceptionSorter that can determine for a particular vender db which exceptions are fatal and mean a connection should be discarded.</description>
          <config-property-name>ExceptionSorterClassName</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>The properties to inect into class implementing org.jboss.jca.adapters.jdbc.ExceptionSorter that can determine for a particular vender db which exceptions are fatal and mean a connection should be discarded.</description>
          <config-property-name>ExceptionSorterProperties</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>The fully qualified name of a class implementing org.jboss.jca.adapters.jdbc.StaleConnectionChecker that can determine for a particular vender db when a connection is stale.</description>
          <config-property-name>StaleConnectionCheckerClassName</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>The properties to inect into class implementing org.jboss.jca.adapters.jdbc.StaleConnectionChecker that can determine for a particular vender db when a connection is stale.</description>
          <config-property-name>StaleConnectionCheckerProperties</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>       	
        <config-property>
          <description>Whether to track unclosed statements - false/true/nowarn</description>
          <config-property-name>TrackStatements</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>Whether to validate the connection on the ManagedConnectionFactory.matchManagedConnection method</description>
          <config-property-name>ValidateOnMatch</config-property-name>
          <config-property-type>java.lang.Boolean</config-property-type>
        </config-property>            
        <config-property>
          <description>Validation of connections during getInvalidConnections</description>
          <config-property-name>BackgroundValidation</config-property-name>
          <config-property-type>java.lang.Boolean</config-property-type>
        </config-property>            
        <config-property>
          <description>Whether to set the query timeout based on the transaction timeout</description>
          <config-property-name>TransactionQueryTimeout</config-property-name>
          <config-property-type>java.lang.Boolean</config-property-type>
        </config-property>
        <config-property>
          <description>A configured query timeout</description>
          <config-property-name>QueryTimeout</config-property-name>
          <config-property-type>java.lang.Integer</config-property-type>
        </config-property>
        <config-property>
          <description>Maximum wait for a lock</description>
          <config-property-name>UseTryLock</config-property-name>
          <config-property-type>java.lang.Integer</config-property-type>
        </config-property>
        <config-property>
          <description>Enable spy functionality</description>
          <config-property-name>Spy</config-property-name>
          <config-property-type>java.lang.Boolean</config-property-type>
        </config-property>
        <config-property>
          <description>The JNDI name of the datasource</description>
          <config-property-name>JndiName</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <config-property>
          <description>The JNDI name of the user transaction</description>
          <config-property-name>UserTransactionJndiName</config-property-name>
          <config-property-type>java.lang.String</config-property-type>
        </config-property>
        <connectionfactory-interface>javax.sql.DataSource</connectionfactory-interface>
        <connectionfactory-impl-class>org.jboss.jca.adapters.jdbc.WrapperDataSource</connectionfactory-impl-class>
        <connection-interface>java.sql.Connection</connection-interface>
        <connection-impl-class>org.jboss.jca.adapters.jdbc.WrappedConnection</connection-impl-class>
      </connection-definition>
      <transaction-support>XATransaction</transaction-support>
      <authentication-mechanism>
        <authentication-mechanism-type>BasicPassword</authentication-mechanism-type>
        <credential-interface>javax.resource.spi.security.PasswordCredential</credential-interface>
      </authentication-mechanism>
      <reauthentication-support>false</reauthentication-support>
    </outbound-resourceadapter>
  </resourceadapter>
</connector>
